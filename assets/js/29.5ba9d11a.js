(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{431:function(t,o,p){"use strict";p.r(o);var v=p(56),_=Object(v.a)({},(function(){var t=this,o=t.$createElement,p=t._self._c||o;return p("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[p("h2",{attrs:{id:"表面的区别"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#表面的区别"}},[t._v("#")]),t._v(" 表面的区别")]),t._v(" "),p("ul",[p("li",[p("p",[t._v("GET在浏览器回退时是无害的，而POST会再次提交请求。")])]),t._v(" "),p("li",[p("p",[t._v("GET产生的URL地址可以被Bookmark，而POST不可以。")])]),t._v(" "),p("li",[p("p",[t._v("GET请求会被浏览器主动cache，而POST不会，除非手动设置。")])]),t._v(" "),p("li",[p("p",[t._v("GET请求只能进行url编码，而POST支持多种编码方式。")])]),t._v(" "),p("li",[p("p",[t._v("GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。（更加安全）")])]),t._v(" "),p("li",[p("p",[t._v("get方式提交数据的大小（一般来说1024字节），http协议并没有硬性限制，而是与浏览器、服务器、操作系统有关，而POST理论上来说没有大小限制，http协议规范也没有进行大小限制，但实际上post所能传递的数据量根据取决于服务器的设置和内存大小。")])]),t._v(" "),p("li",[p("p",[t._v("对参数的数据类型，GET只接受ASCII字符，而POST没有限制。")])]),t._v(" "),p("li",[p("p",[t._v("GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。")])]),t._v(" "),p("li",[p("p",[t._v("GET参数通过URL传递，POST放在Request body中。（有 data 参数进行传递）")])]),t._v(" "),p("li",[p("p",[t._v("GET 是幂等性操作，而 POST 不是。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。而PUT所对应的URI是要创建或更新的资源本身。比如：PUT http://www.forum/articles/4231 的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。")])])]),t._v(" "),p("h2",{attrs:{id:"相同点"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#相同点"}},[t._v("#")]),t._v(" 相同点")]),t._v(" "),p("p",[t._v("GET和POST是HTTP协议中的两种发送请求的方法。")]),t._v(" "),p("p",[t._v("HTTP是基于TCP/IP的关于数据如何在万维网中如何通信的协议。")]),t._v(" "),p("p",[t._v("HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。")]),t._v(" "),p("p",[t._v("GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。")]),t._v(" "),p("h3",{attrs:{id:"重大区别"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#重大区别"}},[t._v("#")]),t._v(" 重大区别")]),t._v(" "),p("p",[t._v("GET产生一个TCP数据包；POST产生两个TCP数据包。")]),t._v(" "),p("p",[t._v("对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；")]),t._v(" "),p("p",[t._v("而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。")]),t._v(" "),p("p",[t._v("因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。")]),t._v(" "),p("ul",[p("li",[p("p",[t._v("GET与POST都有自己的语义，不能随便混用。")])]),t._v(" "),p("li",[p("p",[t._v("据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。")])]),t._v(" "),p("li",[p("p",[t._v("并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。")])])]),t._v(" "),p("p",[t._v("get一般是用来获取数据，post提交数据")]),t._v(" "),p("p",[t._v("post其实是有大小限制的，只不过是取决于服务器的设置和内存大小。")]),t._v(" "),p("p",[t._v("还有更深入的区别：")]),t._v(" "),p("p",[t._v("GET是用来向获取服务器信息的，请求报文传输的信息只是用于描述所需资源的参数，返回的信息才是数据本身；POST是用来向服务器传递数据的，其请求报文传递的信息就是数据本身，返回的报文只是操作的结果。")]),t._v(" "),p("h2",{attrs:{id:"补充"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[t._v("#")]),t._v(" 补充")]),t._v(" "),p("p",[t._v("我们会发现，在很多post,put,delete等请求之前，会有一次options请求。（预检查）")]),t._v(" "),p("p",[t._v("根本原因就是，W3C规范这样要求了！在跨域请求中，分为简单请求（get和部分post，post时content-type属于application/x-www-form-urlencoded，multipart/form-data，text/plain中的一种）和复杂请求。而复杂请求发出之前，就会出现一次options请求。")]),t._v(" "),p("p",[t._v("什么是options请求呢？它是一种探测性的请求，通过这个方法，客户端可以在采取具体资源请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能。")]),t._v(" "),p("p",[t._v("在ajax中出现options请求，也是一种提前探测的情况，ajax跨域请求时，如果请求的是json，就属于复杂请求，因此需要提前发出一次options请求，用以检查请求是否是可靠安全的，如果options获得的回应是拒绝性质的，比如404\\403\\500等http状态，就会停止post、put等请求的发出。")]),t._v(" "),p("p",[t._v("虽然有人提出可以取消options请求，但是实测后发现是不行的，jquery封装之后，更不能轻易取消。因此，靠javascript客户端取消options请求是不可能的，只能通过服务端对options请求做出正确的回应，这样才能保证options请求之后，post、put等请求可以被发出。但是，我们不能允许所有的options请求，而应该是有条件的，所以最好是通过一个特殊的机制，去验证客户端发出的options请求数据是否是符合服务端的条件的，如果不满足，返回403，则客户端会取消原有的post计划。")]),t._v(" "),p("p",[t._v("前台跨域post请求，由于CORS（cross origin resource share）规范的存在，浏览器会首先发送一次options嗅探，同时header带上origin，判断是否有跨域请求权限，服务器响应access control allow origin的值，供浏览器与origin匹配，如果匹配则正式发送post请求。")]),t._v(" "),p("p",[t._v("如果有服务器程序权限，设置，比如jsp中，设置header access control allow origin等于*，就可以得到跨域访问的目的。")])])}),[],!1,null,null,null);o.default=_.exports}}]);