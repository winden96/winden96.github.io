(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{428:function(E,t,A){"use strict";A.r(t);var r=A(56),_=Object(r.a)({},(function(){var E=this,t=E.$createElement,A=E._self._c||t;return A("ContentSlotsDistributor",{attrs:{"slot-key":E.$parent.slotKey}},[A("h2",{attrs:{id:"_1-解析-url"}},[A("a",{staticClass:"header-anchor",attrs:{href:"#_1-解析-url"}},[E._v("#")]),E._v(" "),A("a",{attrs:{href:"https://veal98.gitee.io/cs-wiki/#/20-%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%81%AB%E7%AE%AD%E8%AE%A1%E5%88%92-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/70-%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AAURL%E5%90%8E%E5%9B%9E%E8%BD%A6-%E8%83%8C%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88?id=_1-%E8%A7%A3%E6%9E%90-url",target:"_blank",rel:"noopener noreferrer"}},[A("strong",[E._v("1. 解析 URL")]),A("OutboundLink")],1)]),E._v(" "),A("p",[E._v("不知道有没有同学会混淆域名和 URL 的概念，可以这样理解，URL 就是我们输入的网址，而网址里面含有域名。举个例子："),A("code",[E._v("www.baidu.com/veal98")]),E._v(" 是一个网址，而 "),A("code",[E._v("www.baidu.com")]),E._v("就是服务器的域名。")]),E._v(" "),A("p",[E._v("URL 各元素的组成如下（当然，下述请求文件的路径名可以省略）：")]),E._v(" "),A("p",[A("img",{attrs:{src:"https://gitee.com/veal98/images/raw/master/img/20210207210245.png",alt:"img"}})]),E._v(" "),A("p",[E._v("这个 URL 请求的目标服务器上的文件路径就是：")]),E._v(" "),A("p",[A("img",{attrs:{src:"https://gitee.com/veal98/images/raw/master/img/20210207210750.png",alt:"img"}})]),E._v(" "),A("p",[E._v("那么首先，浏览器做的第一步就是解析 URL 得到里面的参数，将域名和需要请求的资源分离开来，从而了解需要请求的是哪个服务器，请求的是服务器上什么资源等等。")]),E._v(" "),A("h2",{attrs:{id:"_2-浏览器封装-http-请求报文"}},[A("a",{staticClass:"header-anchor",attrs:{href:"#_2-浏览器封装-http-请求报文"}},[E._v("#")]),E._v(" "),A("a",{attrs:{href:"https://veal98.gitee.io/cs-wiki/#/20-%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%81%AB%E7%AE%AD%E8%AE%A1%E5%88%92-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/70-%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AAURL%E5%90%8E%E5%9B%9E%E8%BD%A6-%E8%83%8C%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88?id=_2-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B0%81%E8%A3%85-http-%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87",target:"_blank",rel:"noopener noreferrer"}},[A("strong",[E._v("2. 浏览器封装 HTTP 请求报文")]),A("OutboundLink")],1)]),E._v(" "),A("p",[E._v("对 "),A("code",[E._v("URL")]),E._v(" 进行解析之后，浏览器确定了目标服务器和文件名，接下来就需要根据这些消息"),A("strong",[E._v("封装")]),E._v("成一个 HTTP 请求报文发送出去。举个 HTTP 请求报文的例子：")]),E._v(" "),A("blockquote",[A("p",[E._v("关于 HTTP 协议详细可见 "),A("a",{attrs:{href:"https://mp.weixin.qq.com/s/98FtlAy0mAtf6tGplQMDqA",target:"_blank",rel:"noopener noreferrer"}},[E._v("HTTP 协议的前世今生"),A("OutboundLink")],1),E._v(" 这篇文章，这里不再赘述")])]),E._v(" "),A("p",[A("img",{attrs:{src:"https://gitee.com/veal98/images/raw/master/img/20210207212035.png",alt:"img"}})]),E._v(" "),A("p",[E._v("解释一下"),A("strong",[E._v("封装")]),E._v("，这是一个贯穿整个计算机网络的概念。就是说发送端在层与层之间传输数据时，每经过一层必定会被打上一个该层所属的首部信息。反之，接收端在层与层之间传输数据时，每经过一层就会把该层对应的首部信息消去。")]),E._v(" "),A("p",[A("img",{attrs:{src:"https://gitee.com/veal98/images/raw/master/img/20210207230329.png",alt:"img"}})]),E._v(" "),A("h2",{attrs:{id:"_3-dns-域名解析获取-ip-地址"}},[A("a",{staticClass:"header-anchor",attrs:{href:"#_3-dns-域名解析获取-ip-地址"}},[E._v("#")]),E._v(" "),A("a",{attrs:{href:"https://veal98.gitee.io/cs-wiki/#/20-%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%81%AB%E7%AE%AD%E8%AE%A1%E5%88%92-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/70-%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AAURL%E5%90%8E%E5%9B%9E%E8%BD%A6-%E8%83%8C%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88?id=_3-dns-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E8%8E%B7%E5%8F%96-ip-%E5%9C%B0%E5%9D%80",target:"_blank",rel:"noopener noreferrer"}},[A("strong",[E._v("3. DNS 域名解析获取 IP 地址")]),A("OutboundLink")],1)]),E._v(" "),A("p",[E._v("封装好 HTTP 请求报文后，在正式还有一项准备工作没有做，那就是获取目标服务器的 IP 地址。")]),E._v(" "),A("p",[E._v("虽然解析得到了域名，理论浏览器已经知道目标服务器是谁了。但是实际上，域名并不是目标服务器真正意义上的地址，互联网上每一台计算机都被全世界唯一 IP 地址标识着，但是 IP 地址并不方便记忆，所以才设计出了域名。")]),E._v(" "),A("p",[E._v("那么就需要解析域名获取目标服务器的 IP 地址。不然空有一个方便记忆的域名咋知道这个请求到底发送到哪里去呢。由域名转换得到 IP 地址就是 DNS 协议做的事情，如下：")]),E._v(" "),A("blockquote",[A("p",[E._v("关于 DNS 详细的内容各位可以回顾 "),A("a",{attrs:{href:"https://mp.weixin.qq.com/s/AfVqL7lEsbRE-YLOPZ4gDQ",target:"_blank",rel:"noopener noreferrer"}},[E._v("超详细 DNS 协议解析"),A("OutboundLink")],1),E._v(" 这篇文章，比如什么是域名，域名服务器，递归查询和迭代查询等等，写的已经足够详细，此处只列出 DNS 的解析过程。")])]),E._v(" "),A("p",[E._v("1）首先搜索"),A("strong",[E._v("浏览器的 DNS 缓存")]),E._v("，缓存中维护着一张域名与 IP 地址的对应表；")]),E._v(" "),A("p",[E._v("2）若没有命中，则继续搜索"),A("strong",[E._v("操作系统的 DNS 缓存")]),E._v("；")]),E._v(" "),A("p",[E._v("3）若仍然没有命中，则操作系统将域名发送至"),A("strong",[E._v("本地域名服务器")]),E._v("，本地域名服务器查询自己的 DNS 缓存，查找成功则返回结果（注意：主机和本地域名服务器之间的查询方式是"),A("strong",[E._v("递归查询")]),E._v("）；")]),E._v(" "),A("p",[E._v("4）若本地域名服务器的 DNS 缓存没有命中，则本地域名服务器向上级域名服务器进行查询，通过以下方式进行"),A("strong",[E._v("迭代查询")]),E._v("（注意：本地域名服务器和其他域名服务器之间的查询方式是迭代查询，防止根域名服务器压力过大）：")]),E._v(" "),A("ul",[A("li",[E._v("首先本地域名服务器向"),A("strong",[E._v("根域名服务器")]),E._v("发起请求，根域名服务器是最高层次的，它并不会直接指明这个域名对应的 IP 地址，而是返回顶级域名服务器的地址，也就是说给本地域名服务器指明一条道路，让他去这里寻找答案")]),E._v(" "),A("li",[E._v("本地域名服务器拿到这个"),A("strong",[E._v("顶级域名服务器")]),E._v("的地址后，就向其发起请求，获取"),A("strong",[E._v("权限域名服务器")]),E._v("的地址")]),E._v(" "),A("li",[E._v("本地域名服务器根据权限域名服务器的地址向其发起请求，最终得到该域名对应的 IP 地址")])]),E._v(" "),A("p",[E._v("4）本地域名服务器将得到的 IP 地址返回给操作系统，同时自己将 IP 地址缓存起来")]),E._v(" "),A("p",[E._v("5）操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起来")]),E._v(" "),A("p",[E._v("6）至此，浏览器就得到了域名对应的 IP 地址，并将 IP 地址缓存起来")]),E._v(" "),A("p",[E._v("配合下图直观理解：")]),E._v(" "),A("p",[A("img",{attrs:{src:"https://gitee.com/veal98/images/raw/master/img/20210120123619.png",alt:"img"}})]),E._v(" "),A("p",[E._v("需要注意的是，DNS 使用的是 UDP 协议，也就是说上面各种请求的转发，都是基于 UDP 这个无连接协议的。")]),E._v(" "),A("h2",{attrs:{id:"_4-建立-tcp-连接"}},[A("a",{staticClass:"header-anchor",attrs:{href:"#_4-建立-tcp-连接"}},[E._v("#")]),E._v(" "),A("a",{attrs:{href:"https://veal98.gitee.io/cs-wiki/#/20-%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%81%AB%E7%AE%AD%E8%AE%A1%E5%88%92-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/70-%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AAURL%E5%90%8E%E5%9B%9E%E8%BD%A6-%E8%83%8C%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88?id=_4-%E5%BB%BA%E7%AB%8B-tcp-%E8%BF%9E%E6%8E%A5",target:"_blank",rel:"noopener noreferrer"}},[A("strong",[E._v("4. 建立 TCP 连接")]),A("OutboundLink")],1)]),E._v(" "),A("p",[E._v("获取到了目标服务器的 IP 地址之后，浏览器就知道我等下请求要发给谁了，这个时候就可以开始发送封装好了的 HTTP 请求报文了，那么既然需要发送请求，必然就需要 TCP 通过三次握手为浏览器和服务器之间建立可靠的连接，"),A("strong",[E._v("保证双方都具有可靠的接收和发送能力")]),E._v("。")]),E._v(" "),A("blockquote",[A("p",[E._v("这里又是一道经典的面试题：TCP 三次握手和四次挥手，详细可见 "),A("a",{attrs:{href:"https://mp.weixin.qq.com/s/u56NcMs68sgi6uDpzJ61yw",target:"_blank",rel:"noopener noreferrer"}},[E._v("关于 TCP 三次握手和四次挥手，满分回答在此"),A("OutboundLink")],1),E._v(" 这篇文章。")])]),E._v(" "),A("p",[E._v("三次握手过程如下图：")]),E._v(" "),A("p",[A("img",{attrs:{src:"https://gitee.com/veal98/images/raw/master/img/20210107175526.png",alt:"img"}})]),E._v(" "),A("h2",{attrs:{id:"_5-浏览器发送请求"}},[A("a",{staticClass:"header-anchor",attrs:{href:"#_5-浏览器发送请求"}},[E._v("#")]),E._v(" "),A("a",{attrs:{href:"https://veal98.gitee.io/cs-wiki/#/20-%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%81%AB%E7%AE%AD%E8%AE%A1%E5%88%92-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/70-%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AAURL%E5%90%8E%E5%9B%9E%E8%BD%A6-%E8%83%8C%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88?id=_5-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82",target:"_blank",rel:"noopener noreferrer"}},[A("strong",[E._v("5. 浏览器发送请求")]),A("OutboundLink")],1)]),E._v(" "),A("p",[E._v("TCP 三次握手完成后，浏览器与目标服务器之间就建立了一个可靠的虚拟通道，于是浏览器就可以发送自己的 HTTP 请求了。")]),E._v(" "),A("p",[E._v("需要注意的是，HTTP 请求报文或者响应报文在 TCP 连接通道上进行传输的时候，由于这些报文比较大，为了更容易和准确可靠的传输，"),A("strong",[E._v("TCP 会将 HTTP 报文按序号分割成若干报文段并加上 TCP 首部，分别进行传输。接收方在收到这些报文段后，按照序号以原来的顺序重组 HTTP 报文")]),E._v("。")]),E._v(" "),A("h2",{attrs:{id:"_6-负责传输的-ip-协议"}},[A("a",{staticClass:"header-anchor",attrs:{href:"#_6-负责传输的-ip-协议"}},[E._v("#")]),E._v(" "),A("a",{attrs:{href:"https://veal98.gitee.io/cs-wiki/#/20-%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%81%AB%E7%AE%AD%E8%AE%A1%E5%88%92-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/70-%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AAURL%E5%90%8E%E5%9B%9E%E8%BD%A6-%E8%83%8C%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88?id=_6-%E8%B4%9F%E8%B4%A3%E4%BC%A0%E8%BE%93%E7%9A%84-ip-%E5%8D%8F%E8%AE%AE",target:"_blank",rel:"noopener noreferrer"}},[A("strong",[E._v("6. 负责传输的 IP 协议")]),A("OutboundLink")],1)]),E._v(" "),A("p",[E._v("实际上，TCP 在三次握手建立连接、四次握手断开连接、以及连接建立过程中的收发数据（TCP 报文段）等各阶段操作时，都是通过 IP 协议进行传输的，IP 协议将这些阶段的数据添加 IP 首部封装成 IP 数据报再进行传输。")]),E._v(" "),A("p",[E._v("IP 数据报的首部存有"),A("strong",[E._v("源 IP 地址")]),E._v("和 "),A("strong",[E._v("目标 IP 地址")]),E._v("。所谓源 IP 地址 就是发送方的 IP 地址；目标 IP 地址就是通过 DNS 域名解析得到的目标服务器的 IP 地址。")]),E._v(" "),A("p",[E._v("事实上，"),A("strong",[E._v("IP 协议身处的网络层规定的是：数据报要通过怎样的路径（传输路线）才能到达对方计算机，并传送给对方")]),E._v("。不理解这句话的详细解释马上就来，继续往下读。")]),E._v(" "),A("h2",{attrs:{id:"_7-使用-arp-协议凭借-mac-地址通信"}},[A("a",{staticClass:"header-anchor",attrs:{href:"#_7-使用-arp-协议凭借-mac-地址通信"}},[E._v("#")]),E._v(" "),A("a",{attrs:{href:"https://veal98.gitee.io/cs-wiki/#/20-%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%81%AB%E7%AE%AD%E8%AE%A1%E5%88%92-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/70-%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AAURL%E5%90%8E%E5%9B%9E%E8%BD%A6-%E8%83%8C%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88?id=_7-%E4%BD%BF%E7%94%A8-arp-%E5%8D%8F%E8%AE%AE%E5%87%AD%E5%80%9F-mac-%E5%9C%B0%E5%9D%80%E9%80%9A%E4%BF%A1",target:"_blank",rel:"noopener noreferrer"}},[A("strong",[E._v("7. 使用 ARP 协议凭借 MAC 地址通信")]),A("OutboundLink")],1)]),E._v(" "),A("blockquote",[A("p",[E._v("关于 IP 协议、IP 地址、MAC 地址等详细请看 "),A("a",{attrs:{href:"https://mp.weixin.qq.com/s/NO9RDt1A3T1rz-Q4_Y0gPw",target:"_blank",rel:"noopener noreferrer"}},[E._v("别再恐惧 IP 协议（万字长文 | 多图预警）"),A("OutboundLink")],1),E._v(" 这篇文章。")])]),E._v(" "),A("p",[E._v("上面说了，IP 协议的作用是把各种数据包传送给对方，而要保证确实传送到对方那里，则需要满足各类条件，其中必要的两个就是 IP 地址 和 MAC 地址。")]),E._v(" "),A("p",[E._v("MAC 地址也是用来唯一标识一个接入互联网的设备的，可能不禁有小伙伴要问，既然网络层已经有了唯一标识的 IP 地址，为啥还需要 MAC 地址？")]),E._v(" "),A("p",[E._v("看下面这幅图，在网络上，"),A("strong",[E._v("通信的双方在同一局域网内的情况是很少见的，通常是需要多台计算机和网络设备的中转才能连接到对方。而在进行中转时，就需要利用下一站中转设备的 MAC 地址来搜索下一个中转目标")]),E._v("。")]),E._v(" "),A("p",[A("img",{attrs:{src:"https://gitee.com/veal98/images/raw/master/img/20210114143919.png",alt:"img"}})]),E._v(" "),A("ul",[A("li",[A("p",[E._v("网络层指定了从哪个主机（「源 IP 地址」）发送到哪个主机（「目的 IP 地址」）。"),A("strong",[E._v("源 IP 地址和目标 IP 地址在传输过程中是不会变化的")])])]),E._v(" "),A("li",[A("p",[E._v("而数据链路层则是根据 MAC 地址在一个接一个的区间中进行传输的，每个区间内的出发地址即「源 MAC 地址」，每个区间内的目的地址即「目的 MAC 地址」。显然，随着数据的传输，"),A("strong",[E._v("源 MAC 地址和目的 MAC 地址会不断的发生变化")])]),E._v(" "),A("p",[E._v("比如上图，"),A("strong",[E._v("网络层告知了 1-2-3 路线，也就是说指明了这几个路由器的 IP 地址。那么数据链路层就会根据这几个 IP 地址对应的 MAC 地址依次找到 1、2、3，并在他们之间传输数据")]),E._v("。")])])]),E._v(" "),A("p",[E._v("🍉 这么说吧，举个形象点的例子：我们把数据链路层当成乘坐高铁从苏州到南京，再在南京转乘到北京，再在北京转乘到西藏的旅客，那么网络层就相当于每个车站的工作人员，"),A("strong",[E._v("在数据链路层每次转乘时，网络层为其购买了一张标有下一个 MAC 地址的车票")]),E._v("。因此，即使旅客（数据链路层）不知道其最终目的地也没有关系，工作人员（网络层）会给你做出指引。")]),E._v(" "),A("p",[E._v("实际上，网络层做出指引的过程，我们将其称为"),A("strong",[E._v("路由控制")]),E._v("，其中又涉及到了路由协议比如 OSPF 等")]),E._v(" "),A("p",[A("img",{attrs:{src:"https://gitee.com/veal98/images/raw/master/img/20210115151809.png",alt:"img"}})]),E._v(" "),A("p",[E._v("那么，"),A("strong",[E._v("将 IP 地址转化为 MAC 地址")]),E._v("，从而在数据链路层精确的传输数据的协议就是 "),A("strong",[E._v("ARP 协议")]),E._v("。")]),E._v(" "),A("p",[E._v("ARP 是借助 "),A("strong",[E._v("ARP 请求与 ARP 响应")]),E._v("两种类型的包确定 MAC 地址的。并且每个主机都有一个 "),A("strong",[E._v("ARP 高速缓存")]),E._v("，里面有本局域网上的各主机和路由器的 "),A("strong",[E._v("IP 地址到 MAC 地址的映射表")]),E._v("。")]),E._v(" "),A("p",[E._v("如下图所示，假定主机 A 向同一链路上的主机 B 发送 IP 数据报，已知主机 A 和主机 B 的 IP 地址，它们互不知道对方的 MAC 地址：")]),E._v(" "),A("p",[A("img",{attrs:{src:"https://gitee.com/veal98/images/raw/master/img/20210123213052.png",alt:"img"}})]),E._v(" "),A("p",[E._v("1）首先，主机 A 为了获得主机 B 的 MAC 地址，它会先去查询自己的 ARP 高速缓存中有没有主机 B 的相关记录；")]),E._v(" "),A("p",[E._v("2）如果主机 A 的 ARP 高速缓存中没有主机 B 的 IP 地址到 MAC 地址的映射，主机 A 就会通过"),A("strong",[E._v("广播")]),E._v("的方式发送 "),A("strong",[E._v("ARP 请求包")]),E._v("（该包携带自己的 IP 地址 和 MAC 地址 以及 目标主机的 IP 地址），表明自己想要获得主机 B 的 MAC 地址；")]),E._v(" "),A("p",[E._v("2） 由于广播请求可以被同一个链路上的所有主机或路由器接收，因此如果这条链路上某个主机或路由的 IP 地址与这个 ARP 请求包中包含的目标主机的 IP 地址相同，那么这个节点就将自己的 MAC 地址塞入 "),A("strong",[E._v("ARP 响应包")]),E._v("中返回给主机 A；")]),E._v(" "),A("p",[A("img",{attrs:{src:"https://gitee.com/veal98/images/raw/master/img/20210123220759.png",alt:"img"}})]),E._v(" "),A("blockquote",[A("p",[E._v("当然，ARP 响应包是以单播的形式进行发送的，毕竟 ARP 请求包中已经包含了主机 A 的 IP 地址，所以主机 B 非常清楚这个响应包应该发送给谁。")]),E._v(" "),A("p",[E._v("大部分网络协议在设计的时候，都是保持极度克制的，不需要的交互就砍掉，能合并的信息就合并，能不用广播就用单播，以此让带宽变得更多让网络变得更快。")])]),E._v(" "),A("p",[E._v("3）主机 A 在收到主机 B 发过来的 ARP 响应包后，向其 ARP 高速缓存中写入主机 B 的 IP 地址到 MAC 地址的映射。")]),E._v(" "),A("p",[A("img",{attrs:{src:"https://gitee.com/veal98/images/raw/master/img/20200427210248.png",alt:"img"}})]),E._v(" "),A("p",[E._v("当然，缓存是有一定期限的，超过这个期限，缓存的内容将被清空。这也使得即使 MAC 地址和 IP 地址的映射关系发生了变化，也依然能够正确的将数据包发送给目标地址。")]),E._v(" "),A("h2",{attrs:{id:"_8-服务器响应请求"}},[A("a",{staticClass:"header-anchor",attrs:{href:"#_8-服务器响应请求"}},[E._v("#")]),E._v(" "),A("a",{attrs:{href:"https://veal98.gitee.io/cs-wiki/#/20-%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%81%AB%E7%AE%AD%E8%AE%A1%E5%88%92-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/70-%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AAURL%E5%90%8E%E5%9B%9E%E8%BD%A6-%E8%83%8C%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88?id=_8-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%93%8D%E5%BA%94%E8%AF%B7%E6%B1%82",target:"_blank",rel:"noopener noreferrer"}},[A("strong",[E._v("8. 服务器响应请求")]),A("OutboundLink")],1)]),E._v(" "),A("p",[E._v("浏览器的 HTTP 请求报文通过 TCP 三次握手建立的连接通道被切分成若干报文段分别发送给服务器，服务器在收到这些报文段后，按照序号以原来的顺序重组 HTTP 请求报文。然后处理并返回一个 HTTP 响应。当然，HTTP 响应报文也要经过和 HTTP 请求报文一样的过程。")]),E._v(" "),A("p",[E._v("看下方这个图回顾一下（图片来源《图解 HTTP》）：")]),E._v(" "),A("p",[A("img",{attrs:{src:"https://gitee.com/veal98/images/raw/master/img/20210207224444.png",alt:"img"}})]),E._v(" "),A("h2",{attrs:{id:"_9-断开-tcp-连接"}},[A("a",{staticClass:"header-anchor",attrs:{href:"#_9-断开-tcp-连接"}},[E._v("#")]),E._v(" "),A("a",{attrs:{href:"https://veal98.gitee.io/cs-wiki/#/20-%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%81%AB%E7%AE%AD%E8%AE%A1%E5%88%92-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/70-%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AAURL%E5%90%8E%E5%9B%9E%E8%BD%A6-%E8%83%8C%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88?id=_9-%E6%96%AD%E5%BC%80-tcp-%E8%BF%9E%E6%8E%A5",target:"_blank",rel:"noopener noreferrer"}},[A("strong",[E._v("9. 断开 TCP 连接")]),A("OutboundLink")],1)]),E._v(" "),A("p",[E._v("浏览器和服务器都不再需要发送数据后，四次挥手断开 TCP 连接，详细可见 "),A("a",{attrs:{href:"https://mp.weixin.qq.com/s/u56NcMs68sgi6uDpzJ61yw",target:"_blank",rel:"noopener noreferrer"}},[E._v("关于 TCP 三次握手和四次挥手，满分回答在此"),A("OutboundLink")],1),E._v(" 这篇文章。")]),E._v(" "),A("h2",{attrs:{id:"_10-浏览器显示界面"}},[A("a",{staticClass:"header-anchor",attrs:{href:"#_10-浏览器显示界面"}},[E._v("#")]),E._v(" "),A("a",{attrs:{href:"https://veal98.gitee.io/cs-wiki/#/20-%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%81%AB%E7%AE%AD%E8%AE%A1%E5%88%92-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/70-%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AAURL%E5%90%8E%E5%9B%9E%E8%BD%A6-%E8%83%8C%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88?id=_10-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%BE%E7%A4%BA%E7%95%8C%E9%9D%A2",target:"_blank",rel:"noopener noreferrer"}},[A("strong",[E._v("10. 浏览器显示界面")]),A("OutboundLink")],1)]),E._v(" "),A("p",[E._v("浏览器接收到服务器返回的数据包，根据浏览器的渲染机制对相应的数据进行渲染")]),E._v(" "),A("h2",{attrs:{id:"总结"}},[A("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[E._v("#")]),E._v(" "),A("a",{attrs:{href:"https://veal98.gitee.io/cs-wiki/#/20-%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%81%AB%E7%AE%AD%E8%AE%A1%E5%88%92-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/70-%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AAURL%E5%90%8E%E5%9B%9E%E8%BD%A6-%E8%83%8C%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88?id=%E6%80%BB%E7%BB%93",target:"_blank",rel:"noopener noreferrer"}},[A("strong",[E._v("总结")]),A("OutboundLink")],1)]),E._v(" "),A("p",[E._v("屏蔽掉底层细节，笼统的总结一下上述过程：")]),E._v(" "),A("p",[E._v("应用层：")]),E._v(" "),A("ul",[A("li",[E._v("浏览器封装 HTTP 请求报文")]),E._v(" "),A("li",[E._v("DNS 解析域名获得目标服务器地址")])]),E._v(" "),A("p",[E._v("传输层：")]),E._v(" "),A("ul",[A("li",[E._v("建立连接")]),E._v(" "),A("li",[E._v("把应用层传过来的 HTTP 请求报文进行分割，并在各个报文上打上标记序号及端口号转发给网络层")])]),E._v(" "),A("p",[E._v("网络层：")]),E._v(" "),A("ul",[A("li",[E._v("利用 ARP 协议根据 IP 地址获取作为通信目的地的 MAC 地址后转发给链路层")])]),E._v(" "),A("p",[E._v("服务端在链路层收到数据，按序往上层发送，一直到应用层接收到浏览器发送来的 HTTP 请求报文，然后处理该请求并返回 HTTP 响应报文，浏览器接收到响应报文之后解析渲染界面。最后 TCP 断开连接。")])])}),[],!1,null,null,null);t.default=_.exports}}]);